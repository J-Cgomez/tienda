import { __decorate, __metadata } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy, ChangeDetectorRef, TemplateRef, ViewEncapsulation, Output, EventEmitter, NgZone, Inject, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { InputBoolean, InputNumber } from '@ng-util/util';
import { NuLazyService } from '@ng-util/lazy';
import { TinymceOptions } from './tinymce.options';
import { DOCUMENT } from '@angular/common';
const isSSR = !(typeof document === 'object' && !!document);
export class TinymceComponent {
    constructor(defConfig, lazySrv, ngZone, doc, cd) {
        this.defConfig = defConfig;
        this.lazySrv = lazySrv;
        this.ngZone = ngZone;
        this.doc = doc;
        this.cd = cd;
        this.load = true;
        this.id = `_tinymce-${Math.random().toString(36).substring(2)}`;
        this.inline = false;
        this._disabled = false;
        /** 延迟初始化 */
        this.delay = 0;
        this.ready = new EventEmitter();
    }
    set disabled(value) {
        this._disabled = value;
        this.setDisabled();
    }
    set loading(value) {
        if (value instanceof TemplateRef) {
            this._loading = null;
            this._loadingTpl = value;
        }
        else {
            this._loading = value;
        }
    }
    get instance() {
        return this._instance;
    }
    _getWin() {
        return this.doc.defaultView || window;
    }
    initDelay() {
        if (isSSR) {
            return;
        }
        setTimeout(() => this.init(), Math.min(0, this.delay));
    }
    init() {
        const win = this._getWin();
        if (!win.tinymce) {
            throw new Error('tinymce js文件加载失败');
        }
        const { defConfig, config, id, inline } = this;
        if (this._instance) {
            return;
        }
        if (defConfig.baseURL) {
            let url = '' + defConfig.baseURL;
            if (url.endsWith('/')) {
                url = url.substr(0, url.length - 1);
            }
            win.tinymce.baseURL = url;
        }
        const userOptions = Object.assign(Object.assign({}, defConfig.config), config);
        const options = Object.assign(Object.assign(Object.assign({ selector: `#` + id, inline }, defConfig.config), config), { setup: (editor) => {
                this._instance = editor;
                if (this.onChange) {
                    editor.on('change keyup', () => {
                        this.value = editor.getContent();
                        this.ngZone.run(() => this.onChange(this.value));
                    });
                }
                if (typeof userOptions.setup === 'function') {
                    userOptions.setup(editor);
                }
            }, init_instance_callback: (editor) => {
                if (editor && this.value) {
                    editor.setContent(this.value);
                }
                this.setDisabled();
                if (typeof userOptions.init_instance_callback === 'function') {
                    userOptions.init_instance_callback(editor);
                }
                this.ready.emit(this._instance);
            } });
        if (userOptions.auto_focus) {
            options.auto_focus = id;
        }
        this.ngZone.runOutsideAngular(() => win.tinymce.init(options));
        this.load = false;
        this.cd.detectChanges();
    }
    destroy() {
        if (!this._instance) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this._instance.off();
            this._instance.remove('#' + this.id);
        });
        this._instance = null;
    }
    setDisabled() {
        if (!this._instance) {
            return;
        }
        this.ngZone.runOutsideAngular(() => this._instance.setMode(this._disabled ? 'readonly' : 'design'));
    }
    ngAfterViewInit() {
        if (isSSR) {
            return;
        }
        // 已经存在对象无须进入懒加载模式
        if (this._getWin().tinymce) {
            this.initDelay();
            return;
        }
        const { defConfig } = this;
        const baseURL = defConfig && defConfig.baseURL;
        const fileName = defConfig && defConfig.fileName;
        const url = (baseURL || './assets/tinymce/') + (fileName || 'tinymce.min.js');
        this.lazySrv.monitor(url).subscribe(() => this.initDelay());
        this.lazySrv.load(url);
    }
    ngOnChanges(changes) {
        if (this._instance && changes.config) {
            this.destroy();
            this.initDelay();
        }
    }
    ngOnDestroy() {
        this.destroy();
    }
    writeValue(value) {
        // value should be NOT NULL
        this.value = value || '';
        if (this._instance) {
            this.ngZone.runOutsideAngular(() => this._instance.setContent(this.value));
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.setDisabled();
    }
}
TinymceComponent.decorators = [
    { type: Component, args: [{
                selector: 'tinymce',
                exportAs: 'tinymce',
                template: `
    <textarea
      *ngIf="!inline"
      [attr.id]="id"
      [attr.placeholder]="placeholder"
      class="tinymce-selector"
    ></textarea>
    <div *ngIf="inline" [attr.id]="id"><ng-content></ng-content></div>
    <div class="loading" *ngIf="load">
      <ng-container *ngIf="_loading; else _loadingTpl">{{
        _loading
      }}</ng-container>
    </div>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TinymceComponent),
                        multi: true,
                    },
                ],
                preserveWhitespaces: false,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
      tinymce .tinymce-selector {
        display: none;
      }
    `]
            },] }
];
TinymceComponent.ctorParameters = () => [
    { type: TinymceOptions },
    { type: NuLazyService },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ChangeDetectorRef }
];
TinymceComponent.propDecorators = {
    config: [{ type: Input }],
    placeholder: [{ type: Input }],
    inline: [{ type: Input }],
    disabled: [{ type: Input }],
    loading: [{ type: Input }],
    delay: [{ type: Input }],
    ready: [{ type: Output }]
};
__decorate([
    InputBoolean(),
    __metadata("design:type", Object)
], TinymceComponent.prototype, "inline", void 0);
__decorate([
    InputNumber(),
    __metadata("design:type", Object)
], TinymceComponent.prototype, "delay", void 0);
//# sourceMappingURL=data:application/json;base64,